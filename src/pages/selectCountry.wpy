<style lang="less">
  .city-letter {
    background-color: #ffffff;
    color: #999999;
    font-size: 24rpx;
    padding: 30rpx 50rpx 0px 50rpx;
    box-sizing: border-box;
  }
  .city-item {
    height: 100rpx;
    line-height: 100rpx;
    background-color: #ffffff;
    text-indent: 47rpx;
    font-size: 28rpx;
    position: relative;
    display: flex;
    justify-content: space-between;
    &::after {
      content: ' ';
      display: block;
      height: 1px;
      width: 90%;
      position: absolute;
      left: 5%;
      bottom: 0;
      background-color: #DDD;
      transform: scaleY(.5)
    }
    &:active {
      opacity: .6;
    }
  }
  .fixed-right-letter-view {
    position: fixed;
    right: 0px;
    width: 50rpx;
  }
  .item-letter-view {
    width: 50rpx;
    height: 36rpx;
    font-size: 24rpx;
    text-align: center;
  }
  .letter-text {
    display: inline-block;
    width: 100%;
    height: 100%;
    text-align: center;
    line-height: 36rpx;
    border-radius: 50%;
    color: #496888;
  }
  .letter-actived {
    background-color: #ccc;
  }
  .fixed-label-letter-view {
    position: fixed;
    right: 150rpx;
    top: 46%;
    width: 50rpx;
    height: 50rpx;
    line-height: 50rpx;
    border-radius: 30rpx;
    text-align: center;
    color: #ffffff;
    background-color: #fa8c1d;
  }
  .city-title-label-view {
    padding: 20rpx 0px;
    text {
      margin-left: 28rpx;
      font-size: 28rpx;
      color: #999999;
    }
  }
  .flex-city-label-view {
    display: flex;
    flex-flow: wrap;
  }
  .item-city-label-view {
    width: 200rpx;
    height: 70rpx;
    box-sizing: border-box;
    text-align: center;
    line-height: 70rpx;
    border: 2rpx solid #DDDDDD;
    font-size: 28rpx;
    color: #333333;
    margin: 0px 0px 20rpx 30rpx;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    &:active {
      opacity: .6;
    }
  }
  .top-title-view {
    width: 100%;
    height: 100rpx;
    line-height: 100rpx;
    font-size: 44rpx;
    color: #333333;
    padding-left: 40rpx;
    background-color: #ffffff;
  }
</style>

<template>
  <view class="body">
    <view class="top-title-view">选择国家/地区</view>
    <scroll-view style="height:{{scrollHeight}}rpx;width:100%;" scroll-y scroll-into-view="{{scrollIntoView}}">
      <repeat for="{{cityList}}" key="index" item="item">
        <view>
          <view class="city-letter" id="{{item[0]}}">{{ item[0] }}</view>
          <repeat for="{{item[1]}}" key="_index" item="_item" index="_index">
            <view class="city-item" @tap="handleCity({{_item}})">
              <view>{{ _item.zh }}</view>
              <view style="margin-right:50rpx;color:#999999;font-size:24rpx;">+{{ _item.code }}</view>
            </view>
          </repeat>
        </view>
      </repeat>
    </scroll-view>
    <view class="fixed-right-letter-view" style="top:{{comTop}}rpx;" catchtouchmove="preventTouchMove">
      <view data-index="{{item}}" wx:key="{{index}}" wx:for="{{cityList}}" class="item-letter-view" @touchmove="touchmove" @touchend="touchend">
        <text class="letter-text {{scrollIntoView == item[0] ? 'letter-actived' : ''}}" @tap="selectedItem({{item}})">{{item[0]}}</text>
      </view>
    </view>
    <view class="fixed-label-letter-view" wx:if="{{scrollIntoView!==''}}">{{scrollIntoView}}</view>
  </view>
</template>

<script>
  import wepy from "wepy";
  import {
    findRegions
  } from "../server/index.js";
  import {
    getSysWidth,
    getSysHeight,
    changePXToRPX,
    changeRPXToPX
  } from '../lib/wx-system.js'
  import countryJson from '../lib/country_code.js'
  var qqmapsdk;
  export default class City extends wepy.page {
    config = {
      navigationBarTitleText: "惠享住"
    };
    components = {};
    data = {
      scrollHeight: 0,
      eachLetterHeight: 0,
      comTop: 120,
      lettersPosition: [],
      scrollIntoView: '',
      cityList: [],
    };
    computed = {};
    watch = {};
    onLoad() {
      this.scrollHeight = changePXToRPX(getSysHeight()) - 100;
      this.$apply()
      let formatCityList = []
      if (Array.isArray(countryJson) && countryJson.length > 0) {
        let tempObj = {};
        for (let item of countryJson) {
          let firstLetter = item.nameIndex
          if (firstLetter !== '') {
            if (tempObj[firstLetter] !== undefined) {
              tempObj[firstLetter].push(item)
            } else {
              tempObj[firstLetter] = [item]
            }
          }
        }
        for (let i of Object.keys(tempObj)) {
          formatCityList.push([i, tempObj[i]])
        }
        formatCityList.sort((pre, next) => {
          return pre[0].charCodeAt() - next[0].charCodeAt()
        })
        this.cityList = formatCityList
        console.log(this.cityList)
        // 每一小格的高度
        this.eachLetterHeight = changeRPXToPX(36)
        let fullHeight = this.cityList.length * this.eachLetterHeight
        this.comTop = changePXToRPX((getSysHeight() - fullHeight) / 2)
        // 顶部距离
        let comTop = changeRPXToPX(this.comTop)
        this.lettersPosition = [];
        // 求各字母距离设备左上角所处位置
        for (let i = 0, len = this.cityList.length; i < len; i++) {
          const x = getSysWidth() - changeRPXToPX(50)
          const y = comTop + (i * this.eachLetterHeight);
          this.lettersPosition.push([x, y]);
        }
      }
      this.$apply()
    }
    onShow() {
      this.$apply()
    }
    methods = {
      handleCity() {
        
      },
      preventTouchMove() {
        console.warn('此方法阻止其他事件。')
      },
      touchmove(e) {
        // this.scrollIntoView = ''
        const x = e.touches[0].clientX
        const y = e.touches[0].clientY
        // 判断触摸点是否在x轴上
        if (x >= this.lettersPosition[0][0]) {
          for (let i = 0, len = this.lettersPosition.length; i < len; i++) {
            const _y = this.lettersPosition[i][1], //每一格y轴的值
              __y = _y + this.eachLetterHeight; // 当前最大y轴高度
            if (y >= _y && y <= __y) {
              this.scrollIntoView = this.cityList[i][0]
              break;
            }
          }
        } else {
          this.scrollIntoView = ''
        }
      },
      selectedItem(item) {
        this.scrollIntoView = item[0]
        this.$apply()
      },
      touchend(e) {
        setTimeout(() => {
          this.scrollIntoView = ''
          this.$apply()
        }, 50);
      },
    };
    onHide() {}
    onUnload() {}
    // 下拉刷新事件
    onPullDownRefresh() {
      wepy.showNavigationBarLoading();
      wepy.stopPullDownRefresh();
      wepy.hideNavigationBarLoading();
    }
  }
</script>
